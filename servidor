#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    dados = conexao.dados_residuais + dados
    conexao.dados_residuais = b''
    if dados == b'':
        return sair(conexao)
    
    if not dados.endswith(b'\r\n'):
        dados = dados.split(b'\r\n')
        dados = list(filter((b'').__ne__, dados))
        conexao.dados_residuais += dados.pop(-1)
    
    else:
        dados = dados.split(b'\r\n')
        dados = list(filter((b'').__ne__, dados))
    
    if dados:
        request, text = dados.split(b' ', 1)
        #conexao.enviar(b':server PONG server :' + dados.split(b' ',1)[1])
        if request == b'PING':
            conexao.enviar(b':server PONG server :' + text)

        if request == b'NICK':
            if (validar_nome(text)):
                nickAlreadyUse = 0
                for i in servidor.users_conected:
                    if i.IdNick.upper() == text.upper():
                        nickAlreadyUse = 1
                        conexao.enviar(b':server 433 ' + conexao.IdNick + b' ' + text + b' :Nickname is already in use\r\n')
                if nickAlreadyUse == 0:
                    if conexao.IdNick == b'*':
                        conexao.enviar(b':server 001 ' + text + b' :Welcome\r\n')
                        conexao.enviar(b':server 422 ' + text + b' :MOTD File is missing\r\n')
                        conexao.IdNick = text
            else:
                conexao.enviar(b':server 432 ' + conexao.IdNick + b' ' + text + b' :Erroneous nickname\r\n')    

    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.dados_residuais = b''
    conexao.IdNick = b'*'
    servidor.users_conected.append(conexao)
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.users_conected = []
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
